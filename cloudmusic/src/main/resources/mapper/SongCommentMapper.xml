<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.zucc.music.dao.SongCommentMapper" >
  <resultMap id="BaseResultMap" type="cn.edu.zucc.music.model.SongComment" >
    <id column="song_comment_id" property="songCommentId" jdbcType="VARCHAR" />
    <result column="song_id" property="songId" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="comment_content" property="commentContent" jdbcType="VARCHAR" />
    <result column="comment_time" property="commentTime" jdbcType="TIMESTAMP" />
    <result column="like_count" property="likeCount" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    song_comment_id, song_id, user_id, comment_content, comment_time, like_count
  </sql>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from song_comment
    where song_comment_id = #{songCommentId,jdbcType=VARCHAR}
  </select>

  <select id="selectBySongId" resultMap="BaseResultMap" parameterType="java.lang.String">
    SELECT * FROM song_comment WHERE song_id = #{songId,jdbcType=VARCHAR}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from song_comment
    where song_comment_id = #{songCommentId,jdbcType=VARCHAR}
  </delete>

  <insert id="insert" parameterType="cn.edu.zucc.music.model.SongComment" >
    insert into song_comment (song_comment_id, song_id, user_id, 
      comment_content, comment_time, like_count
      )
    values (#{songCommentId,jdbcType=VARCHAR}, #{songId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR},
      #{commentContent,jdbcType=VARCHAR}, #{commentTime,jdbcType=TIMESTAMP}, #{likeCount,jdbcType=INTEGER}
      )
  </insert>

  <insert id="insertSelective" parameterType="cn.edu.zucc.music.model.SongComment" >
    insert into song_comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="songCommentId != null" >
        song_comment_id,
      </if>
      <if test="songId != null" >
        song_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="commentContent != null" >
        comment_content,
      </if>
      <if test="commentTime != null" >
        comment_time,
      </if>
      <if test="likeCount != null" >
        like_count,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="songCommentId != null" >
        #{songCommentId,jdbcType=VARCHAR},
      </if>
      <if test="songId != null" >
        #{songId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="commentContent != null" >
        #{commentContent,jdbcType=VARCHAR},
      </if>
      <if test="commentTime != null" >
        #{commentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likeCount != null" >
        #{likeCount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.zucc.music.model.SongComment" >
    update song_comment
    <set >
      <if test="songId != null" >
        song_id = #{songId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="commentContent != null" >
        comment_content = #{commentContent,jdbcType=VARCHAR},
      </if>
      <if test="commentTime != null" >
        comment_time = #{commentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likeCount != null" >
        like_count = #{likeCount,jdbcType=INTEGER},
      </if>
    </set>
    where song_comment_id = #{songCommentId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.zucc.music.model.SongComment" >
    update song_comment
    set song_id = #{songId,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=VARCHAR},
      comment_content = #{commentContent,jdbcType=VARCHAR},
      comment_time = #{commentTime,jdbcType=TIMESTAMP},
      like_count = #{likeCount,jdbcType=INTEGER}
    where song_comment_id = #{songCommentId,jdbcType=VARCHAR}
  </update>
</mapper>