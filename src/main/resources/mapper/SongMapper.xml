<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.zucc.advancejava.dao.SongMapper">
  <resultMap id="BaseResultMap" type="cn.edu.zucc.advancejava.model.Song">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="song_id" jdbcType="INTEGER" property="songId" />
    <result column="song_name" jdbcType="VARCHAR" property="songName" />
    <result column="comment_id" jdbcType="INTEGER" property="commentId" />
    <result column="album_id" jdbcType="INTEGER" property="albumId" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="path" jdbcType="VARCHAR" property="path" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.edu.zucc.advancejava.model.Song">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Base_Column_List">
    id, song_id, song_name, comment_id, album_id, user_id, url, path
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from song
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from song
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.edu.zucc.advancejava.model.Song">
    insert into song (id, song_id, song_name, 
      comment_id, album_id, user_id, 
      url, path, content
      )
    values (#{id,jdbcType=INTEGER}, #{songId,jdbcType=INTEGER}, #{songName,jdbcType=VARCHAR}, 
      #{commentId,jdbcType=INTEGER}, #{albumId,jdbcType=INTEGER}, #{userId,jdbcType=VARCHAR}, 
      #{url,jdbcType=VARCHAR}, #{path,jdbcType=VARCHAR}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.zucc.advancejava.model.Song">
    insert into song
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="songId != null">
        song_id,
      </if>
      <if test="songName != null">
        song_name,
      </if>
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="albumId != null">
        album_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="path != null">
        path,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="songId != null">
        #{songId,jdbcType=INTEGER},
      </if>
      <if test="songName != null">
        #{songName,jdbcType=VARCHAR},
      </if>
      <if test="commentId != null">
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="albumId != null">
        #{albumId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="path != null">
        #{path,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.zucc.advancejava.model.Song">
    update song
    <set>
      <if test="songId != null">
        song_id = #{songId,jdbcType=INTEGER},
      </if>
      <if test="songName != null">
        song_name = #{songName,jdbcType=VARCHAR},
      </if>
      <if test="commentId != null">
        comment_id = #{commentId,jdbcType=INTEGER},
      </if>
      <if test="albumId != null">
        album_id = #{albumId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="path != null">
        path = #{path,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.edu.zucc.advancejava.model.Song">
    update song
    set song_id = #{songId,jdbcType=INTEGER},
      song_name = #{songName,jdbcType=VARCHAR},
      comment_id = #{commentId,jdbcType=INTEGER},
      album_id = #{albumId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      path = #{path,jdbcType=VARCHAR},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.zucc.advancejava.model.Song">
    update song
    set song_id = #{songId,jdbcType=INTEGER},
      song_name = #{songName,jdbcType=VARCHAR},
      comment_id = #{commentId,jdbcType=INTEGER},
      album_id = #{albumId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      path = #{path,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>